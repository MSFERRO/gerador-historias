const express = require('express');
const cors = require('cors');
const Groq = require('groq-sdk');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// Inicializar Groq apenas se a API key estiver configurada
let groq;
if (process.env.GROQ_API_KEY) {
  groq = new Groq({
    apiKey: process.env.GROQ_API_KEY
  });
}

// Middlewares
app.use(cors());
app.use(express.json());

// Health check
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'Gerador de Hist√≥rias API est√° funcionando!',
    groqConfigured: !!process.env.GROQ_API_KEY,
    timestamp: new Date().toISOString()
  });
});

// Rota principal da API
app.post('/api/generate-story', async (req, res) => {
  try {
    const { projectTitle, clientName, description } = req.body;

    if (!projectTitle || !clientName || !description) {
      return res.status(400).json({
        error: 'Todos os campos s√£o obrigat√≥rios',
        fields: {
          projectTitle: !projectTitle,
          clientName: !clientName, 
          description: !description
        }
      });
    }

    // Se Groq n√£o estiver configurado, usar simula√ß√£o
    if (!groq) {
      const simulatedStory = `
# ${projectTitle}
**Cliente:** ${clientName}
**Data:** ${new Date().toLocaleDateString('pt-BR')}

---

## Ì≥ã Hist√≥ria de Usu√°rio

**Como** usu√°rio do sistema
**Eu quero** ${description.split(' ').slice(0, 10).join(' ')}
**Para** melhorar a efici√™ncia do processo

---

## ‚úÖ Crit√©rios de Aceita√ß√£o

1. **Dado que** estou logado no sistema
   **Quando** acesso a funcionalidade
   **Ent√£o** devo conseguir realizar a a√ß√£o

2. **Dado que** os dados est√£o corretos
   **Quando** submeto o formul√°rio  
   **Ent√£o** o sistema deve processar com sucesso

---

## ÌæØ Prioridade

**ALTA** - Funcionalidade essencial para o neg√≥cio

*‚ö†Ô∏è MODO SIMULA√á√ÉO - Configure GROQ_API_KEY para usar IA real*
      `;

      return res.json({
        success: true,
        story: simulatedStory,
        metadata: {
          projectTitle,
          clientName,
          generatedAt: new Date().toISOString(),
          tokensUsed: 0,
          mode: 'simulation'
        }
      });
    }

    // USANDO GROQ API REAL
    const systemPrompt = `Voc√™ √© um especialista em engenharia de software e metodologias √°geis. 
Sua tarefa √© criar hist√≥rias de usu√°rio PROFISSIONAIS seguindo os crit√©rios INVEST:

I ‚Äì Independente: A hist√≥ria deve ser independente de outras
N ‚Äì Negoci√°vel: Deve ser um lembrete para conversa, n√£o contrato fixo
V ‚Äì Valiosa: Deve entregar valor claro ao usu√°rio final
E ‚Äì Estim√°vel: A equipe deve conseguir estimar o esfor√ßo
S ‚Äì Pequena: Deve caber em uma sprint (2-4 semanas)
T ‚Äì Test√°vel: Com crit√©rios de aceita√ß√£o claros

Formato: "Como [usu√°rio], eu quero [a√ß√£o], para [benef√≠cio]"

Responda SEMPRE em PORTUGU√äS.`;

    const userPrompt = `Crie uma hist√≥ria de usu√°rio COMPLETA e PROFISSIONAL baseada nestas informa√ß√µes:

PROJETO: ${projectTitle}
CLIENTE: ${clientName}
DESCRI√á√ÉO: ${description}

INSTRU√á√ïES ESPEC√çFICAS:

1. Siga RIGOROSAMENTE o formato INVEST
2. Inclua crit√©rios de aceita√ß√£o DETALHADOS (4-6 itens)
3. Considere: suporte multil√≠ngue (PT/EN/ES), contexto de rede interna, integra√ß√£o com sistemas existentes
4. Seja ESPEC√çFICO e PR√ÅTICO
5. Formate em Markdown

ENTREGUE:
- T√≠tulo da hist√≥ria
- Hist√≥ria no formato "Como... eu quero... para..."
- Descri√ß√£o detalhada
- Crit√©rios de aceita√ß√£o (Dado que... Quando... Ent√£o...)
- Prioridade (Alta/M√©dia/Baixa) com justificativa
- Estimativa (Story Points: 1-13)
- Notas t√©cnicas relevantes`;

    console.log('Ì≥§ Enviando para Groq API...');
    
    const chatCompletion = await groq.chat.completions.create({
      messages: [
        {
          role: 'system',
          content: systemPrompt
        },
        {
          role: 'user',
          content: userPrompt
        }
      ],
      model: 'llama-3.3-70b-versatile',
      temperature: 0.7,
      max_tokens: 2000,
      top_p: 1,
      stream: false
    });

    const generatedStory = chatCompletion.choices[0]?.message?.content || '';

    console.log('‚úÖ Hist√≥ria gerada com sucesso pela IA');

    res.json({
      success: true,
      story: generatedStory,
      metadata: {
        projectTitle,
        clientName,
        generatedAt: new Date().toISOString(),
        tokensUsed: chatCompletion.usage?.total_tokens || 0,
        mode: 'groq_ai'
      }
    });

  } catch (error) {
    console.error('‚ùå Erro ao gerar hist√≥ria:', error);
    
    if (error.message?.includes('API key')) {
      return res.status(401).json({ 
        error: 'Erro de autentica√ß√£o com Groq API. Verifique sua API key.'
      });
    }

    res.status(500).json({
      error: 'Erro interno do servidor',
      message: error.message
    });
  }
});

// Iniciar servidor
app.listen(PORT, () => {
  console.log('Ì∫Ä BACKEND INICIADO!');
  console.log(`Ì≥ç Porta: ${PORT}`);
  console.log(`Ìºê Health: http://localhost:${PORT}/api/health`);
  console.log(`Ì¥ñ Groq API: ${process.env.GROQ_API_KEY ? '‚úÖ CONFIGURADA' : '‚ùå N√ÉO CONFIGURADA (modo simula√ß√£o)'}`);
  if (!process.env.GROQ_API_KEY) {
    console.log('Ì≤° Dica: Configure GROQ_API_KEY no arquivo .env para usar IA real');
  }
});
